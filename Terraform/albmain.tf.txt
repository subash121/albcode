provider "aws" {
  region = "us-east-1"
}


#elb security group create
resource "aws_security_group" "api_elb_sg" {
  name        = "test_sg_one"
  description = "Security Group ELB"
  vpc_id      = data.aws_vpc.pro-vpc.id
  tags = {
      "Name"        = "test_sg_one"
      "Environment" ="dev"
    }
}
resource "aws_security_group_rule" "api_tcp_80_mgx_elb" {
  type              = "ingress"
  from_port         = "80"
  to_port           = "80"
  protocol          = "tcp"
  cidr_blocks       = ["0.0.0.0/0"]
  security_group_id = aws_security_group.api_elb_sg.id
}
resource "aws_security_group_rule" "api_tcp_443_mgx_elb" {
  type              = "ingress"
  from_port         = "443"
  to_port           = "443"
  protocol          = "tcp"
  cidr_blocks       = ["0.0.0.0/0"]
  security_group_id = aws_security_group.api_elb_sg.id
}
resource "aws_security_group_rule" "api_elb_sg_egress" {
  type              = "egress"
  from_port         = "0"
  to_port           = "0"
  protocol          = "-1"
  cidr_blocks       = ["0.0.0.0/0"]
  security_group_id = aws_security_group.api_elb_sg.id
}
#ec2 create
resource "aws_instance" "pro3" {
  ami           = var.ami
  instance_type = var.ins-type
  key_name = "24321"
  subnet_id = data.aws_subnet.pro-sub1.id
  associate_public_ip_address = true
  user_data = <<EOF
#!/bin/bash
yum update -y	
yum install httpd -y
service httpd start
echo "<h1>Terraform 1 page<h1>" > /var/www/html/index.html
EOF
  tags = {
    Name = "user1"
  }
}
resource "aws_instance" "pro4" {
  ami           = var.ami
  instance_type = var.ins-type
  key_name = "24321"
  subnet_id = data.aws_subnet.pub-sub2.id
  associate_public_ip_address = true
  user_data = <<EOF
#!/bin/bash
yum update -y	
yum install httpd -y
service httpd start
echo "<h1>Terraform 2 page<h1>" > /var/www/html/index.html
EOF
tags = {
    Name = "user2"
  }
}
#target group create
resource "aws_lb_target_group" "test-tg" {
  name     = "test-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = data.aws_vpc.pro-vpc.id
}
resource "aws_lb_target_group_attachment" "test-tg" {
  target_group_arn = aws_lb_target_group.test-tg.arn
  target_id        = aws_instance.pro3.id
  port             = 80
}
resource "aws_lb_target_group_attachment" "test1-tg" {
  target_group_arn = aws_lb_target_group.test-tg.arn
  target_id        = aws_instance.pro4.id
  port             = 80
}
#create elb
resource "aws_lb" "test-lb" {
  name               = "test-lb"
  internal           = false
  load_balancer_type = "application"
  enable_cross_zone_load_balancing =  true
  security_groups    = [aws_security_group.api_elb_sg.id]
  subnets            = [data.aws_subnet.pro-sub1.id,data.aws_subnet.pub-sub2.id]

  enable_deletion_protection = false
}
#create listener
resource "aws_lb_listener" "alb-lis" {
  load_balancer_arn = aws_lb.test-lb.arn
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.test-tg.arn
  }
}